#!/usr/bin/env python

class Key:
    def __init__(self,lineArr):
        self.keyDict = {}
        self._createDict(lineArr)

    def _createDict(self,lineArr):
        for y in range(len(lineArr)):
            line = lineArr[y]
            for x in range(len(line)):
                char = line[x]
                if char != ' ':
                    self.keyDict[char] = (x,y)
                    #print(line[x],x,y)

    def getPosition(self,char):
        return self.keyDict[char]

class Puzzle:
    def __init__(self,lineArr):
        self.puzzleDict = {}
        self._createDict(lineArr)

    def _createDict(self,lineArr):
        for y in range(len(lineArr)):
            line = lineArr[y]
            for x in range(len(line)):
                char = line[x]
                self.puzzleDict[(x,y)]=char

    def moveRight(self,pos):
        x,y = pos
        return self.puzzleDict[(x+1,y)]
    
    def moveLeft(self,pos):
        x,y = pos
        return self.puzzleDict[(x-1,y)]

    def moveUp(self,pos):
        x,y = pos
        return self.puzzleDict[(x,y-1)]

    def moveDown(self,pos):
        x,y = pos
        return self.puzzleDict[(x,y+1)]

def readFile(filename):
    f = open(filename, 'r')
    linesList = f.readlines()
    f.close()
    return [l.replace("\n","") for l in linesList]

def main():
    key = Key(readFile("mirrorKey.txt"))
    
    totalPuzz = readFile("mirrorTest.txt")
    encryptedStr, puzzleGrid = totalPuzz[-1], totalPuzz[0:len(totalPuzz)-1]
    
    puzzle = Puzzle(puzzleGrid)

    for letter in encryptedStr:
        currPos  = key.getPosition(letter)
        currX,currY = currPos

        while
        if letter.isupper():
            if currX == 0:
                puzzle.moveRight(currPos)
            else:
                puzzle.moveUp(currPos)
        else:
            if currY == 0:
                puzzle.moveDown(currPos)
            else:
                puzzle.moveLeft(currPos)

if __name__ == "__main__":
    main()
